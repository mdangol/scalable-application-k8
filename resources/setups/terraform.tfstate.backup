{
  "version": 4,
  "terraform_version": "0.14.2",
  "serial": 34,
  "lineage": "b710e265-6b0e-acb6-2e20-7b0dd2910cfd",
  "outputs": {
    "ENVNAME": {
      "value": "sbx Private Subnet (AZ2)",
      "type": "string"
    },
    "subnets_two_private": {
      "value": "subnet-0178ee4a35f023d84, subnet-0ff162bcd6fe6bf45",
      "type": "string"
    },
    "subnetsall": {
      "value": [
        "subnet-0178ee4a35f023d84"
      ],
      "type": [
        "tuple",
        [
          "string"
        ]
      ]
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_cloudformation_export",
      "name": "demo-eks-iam-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exporting_stack_id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-eks-iam-role/515bb280-3d64-11eb-99f6-0aeefef9077b",
            "id": "cloudformation-exports-us-east-1-demo-eks-iam-role-RoleArn",
            "name": "demo-eks-iam-role-RoleArn",
            "value": "arn:aws:iam::629150534577:role/demo-eks-iam-role-eksClusterRole-1NGFBK5ZWJI9T"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_cloudformation_export",
      "name": "demo-sg-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exporting_stack_id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-vpc/7d3f5010-3d63-11eb-921c-0adc8babde53",
            "id": "cloudformation-exports-us-east-1-demo-vpc-SG",
            "name": "demo-vpc-SG",
            "value": "sg-0d95ce5fb56d52675"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_cloudformation_export",
      "name": "demo-vpc-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "exporting_stack_id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-vpc/7d3f5010-3d63-11eb-921c-0adc8babde53",
            "id": "cloudformation-exports-us-east-1-demo-vpc-VPCID",
            "name": "demo-vpc-VPCID",
            "value": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_subnet",
      "name": "all_subnets-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": "subnet-0178ee4a35f023d84",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:629150534577:subnet/subnet-0178ee4a35f023d84",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.3.0/24",
            "default_for_az": false,
            "filter": null,
            "id": "subnet-0178ee4a35f023d84",
            "ipv6_cidr_block": null,
            "ipv6_cidr_block_association_id": null,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "629150534577",
            "state": "available",
            "tags": {
              "Name": "sbx Private Subnet (AZ2)"
            },
            "vpc_id": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "subnet-03d50c5cff724ff5f",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:629150534577:subnet/subnet-03d50c5cff724ff5f",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.0.0/24",
            "default_for_az": false,
            "filter": null,
            "id": "subnet-03d50c5cff724ff5f",
            "ipv6_cidr_block": null,
            "ipv6_cidr_block_association_id": null,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "629150534577",
            "state": "available",
            "tags": {
              "Name": "sbx Public Subnet (AZ1)"
            },
            "vpc_id": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "subnet-0a2ecbd3c9a5fecc5",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:629150534577:subnet/subnet-0a2ecbd3c9a5fecc5",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az2",
            "cidr_block": "10.0.1.0/24",
            "default_for_az": false,
            "filter": null,
            "id": "subnet-0a2ecbd3c9a5fecc5",
            "ipv6_cidr_block": null,
            "ipv6_cidr_block_association_id": null,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "629150534577",
            "state": "available",
            "tags": {
              "Name": "sbx Public Subnet (AZ2)"
            },
            "vpc_id": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        },
        {
          "index_key": "subnet-0ff162bcd6fe6bf45",
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:629150534577:subnet/subnet-0ff162bcd6fe6bf45",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az1",
            "cidr_block": "10.0.2.0/24",
            "default_for_az": false,
            "filter": null,
            "id": "subnet-0ff162bcd6fe6bf45",
            "ipv6_cidr_block": null,
            "ipv6_cidr_block_association_id": null,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "629150534577",
            "state": "available",
            "tags": {
              "Name": "sbx Private Subnet (AZ1)"
            },
            "vpc_id": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_subnet_ids",
      "name": "all_subnet_ids-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filter": null,
            "id": "vpc-0c5cf39e1c414eddd",
            "ids": [
              "subnet-0178ee4a35f023d84",
              "subnet-03d50c5cff724ff5f",
              "subnet-0a2ecbd3c9a5fecc5",
              "subnet-0ff162bcd6fe6bf45"
            ],
            "tags": null,
            "vpc_id": "vpc-0c5cf39e1c414eddd"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.ec2-admin-setup",
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "demo-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-ec2/df8f5a70-3d64-11eb-842a-12d2fa0db74d",
            "name": "demo-ec2",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "InstanceId": "i-077164c5a15af38b6"
            },
            "parameters": {
              "ImageId": "ami-04d29b6f966df1537",
              "InstanceName": "demo-admin-instance",
              "InstanceType": "t2.micro",
              "KeyName": "ec2-demo",
              "SecurityGroup": "sg-0d95ce5fb56d52675",
              "SubnetId": "subnet-0a2ecbd3c9a5fecc5"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "template_body": "AWSTemplateFormatVersion: 2010-09-09\nDescription: EC2 template to create AMZ Linux instance for running kubectl\n\nParameters: \n  InstanceName: \n    Description: \"Name of the instance\"\n    Type: String\n  KeyName:\n      Description: \"Name of the existing EC2 keypair\"\n      Type: AWS::EC2::KeyPair::KeyName\n      Default: \"ec2-demo\"\n  ImageId:\n    Description: \"ImageId to launch\"\n    Type: String\n  InstanceType:\n    Description: \"InstanceType\"\n    Type: String\n    Default: \"t2.micro\"\n  SecurityGroup:\n    Description: \"SG Name to use\"\n    Type: String\n  SubnetId:\n    Description: \"SubnetId to deploy this EC2\"\n    Type: String\n     \nResources: \n  EC2Instance:\n      Type: AWS::EC2::Instance\n      Properties:\n        KeyName: !Ref KeyName\n        ImageId: !Ref ImageId\n        InstanceType: !Ref InstanceType\n        SecurityGroupIds: \n          - !Ref SecurityGroup\n        SubnetId: !Ref SubnetId\n        UserData: !Base64 |\n          #!/bin/bash -ex\n          \n          # Install kubectl\n          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl\n          chmod +x ./kubectl\n          mkdir -p $HOME/bin \u0026\u0026 cp ./kubectl $HOME/bin/kubectl \u0026\u0026 export PATH=$PATH:$HOME/bin\n          echo 'export PATH=$PATH:$HOME/bin' \u003e\u003e ~/.bashrc\n          kubectl version --short --client\n\n          # Install eksctl\n          curl --silent --location \"https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\n          sudo mv /tmp/eksctl /usr/local/bin\n          eksctl version\n\n          # Install IAM Authenticator for eks\n          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator\n          chmod +x ./aws-iam-authenticator\n          mkdir -p $HOME/bin \u0026\u0026 cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator \u0026\u0026 export PATH=$PATH:$HOME/bin\n          echo 'export PATH=$PATH:$HOME/bin' \u003e\u003e ~/.bashrc\n\n\n\n        Tags:\n          - Key: Name\n            Value: !Ref InstanceName\n\nOutputs:\n  InstanceId:\n    Description: InstanceId of the new EC2\n    Value: !Ref 'EC2Instance'\n    ",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "data.aws_cloudformation_export.demo-sg-ec2",
            "data.aws_subnet.all_subnets-ec2",
            "data.aws_subnet_ids.all_subnet_ids-ec2",
            "module.vpc_setup.aws_cloudformation_stack.demo-vpc"
          ]
        }
      ]
    },
    {
      "module": "module.eks",
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "demo-eks",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-eks/df7adb80-3d79-11eb-a8f3-0e8a861a6983",
            "name": "demo-eks",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {},
            "parameters": {
              "EKSClusterName": "demo-admin-instance",
              "EKSRole": "arn:aws:iam::629150534577:role/demo-eks-iam-role-eksClusterRole-1NGFBK5ZWJI9T",
              "KeyPairName": "ec2-demo",
              "PrivateSubnets": "subnet-03d50c5cff724ff5f,subnet-0a2ecbd3c9a5fecc5",
              "SecurityGroupIds": "sg-0d95ce5fb56d52675",
              "SubnetIds": "subnet-0178ee4a35f023d84,subnet-03d50c5cff724ff5f,subnet-0a2ecbd3c9a5fecc5,subnet-0ff162bcd6fe6bf45",
              "WorkerNodesImageId": "ami-0f4cae6ae56be18ee"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "template_body": "\nDescription:  Create EKS for demo purpose\n\nParameters:\n  EKSClusterName:\n    Description: EKs Cluster Namme\n    Type: String\n  EKSRole:\n    Description: Role that will be used by EKS\n    Type: String\n  SubnetIds:\n    Description: Subnet Ids to use\n    Type: \"List\u003cAWS::EC2::Subnet::Id\u003e\"\n  SecurityGroupIds:\n    Description: Security group ids to use\n    Type: \"List\u003cAWS::EC2::SecurityGroup::Id\u003e\"\n  PrivateSubnets:\n    Description: Subnet Ids to use\n    Type: \"List\u003cAWS::EC2::Subnet::Id\u003e\"\n  WorkerNodesImageId:\n    Description: ImageId for worker node\n    Type: String\n  KeyPairName:\n    Description: Ec2 Key Pair name\n    Type: AWS::EC2::KeyPair::KeyName\n\n\nResources:\n  myCluster:\n    Type: 'AWS::EKS::Cluster'\n    Properties:\n      Name: !Ref EKSClusterName\n      Version: '1.18'\n      RoleArn: !Ref EKSRole\n      ResourcesVpcConfig:\n        SecurityGroupIds: !Ref SecurityGroupIds\n        SubnetIds: !Ref SubnetIds\n\n  WorkerNodesAutoScalingGroup:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    UpdatePolicy:\n      AutoScalingRollingUpdate:\n        MinInstancesInService: 1\n        MaxBatchSize: 1\n    Properties:\n      LaunchConfigurationName: !Ref WorkerNodesLaunchConfiguration\n      MinSize: 2\n      MaxSize: 2\n      VPCZoneIdentifier: !Ref PrivateSubnets\n      Tags:\n        - Key: Name\n          Value: !Sub \"${AWS::StackName}-WorkerNodesAutoScalingGroup\"\n          PropagateAtLaunch: true\n        # Without this tag, worker nodes are unable to join the cluster:\n        - Key: !Sub \"kubernetes.io/cluster/${myCluster}\"\n          Value: \"owned\"\n          PropagateAtLaunch: true\n\n  WorkerNodesLaunchConfiguration:\n    Type: AWS::AutoScaling::LaunchConfiguration\n    # Wait until cluster is ready before launching worker nodes\n    DependsOn: myCluster\n    Properties:\n      AssociatePublicIpAddress: true\n      IamInstanceProfile: !Ref WorkerNodesInstanceProfile\n      ImageId: !Ref WorkerNodesImageId\n      InstanceType: t3.micro\n      KeyName: !Ref KeyPairName\n      SecurityGroups: !Ref SecurityGroupIds\n      UserData:\n        Fn::Base64: !Sub |\n            #!/bin/bash\n            set -o xtrace\n            /etc/eks/bootstrap.sh ${myCluster}\n            /opt/aws/bin/cfn-signal \\\n                            --exit-code $? \\\n                            --stack  ${AWS::StackName} \\\n                            --resource NodeGroup  \\\n                            --region ${AWS::Region}\n\n  WorkerNodesInstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref WorkerNodesRole\n\n  WorkerNodesRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          Effect: Allow\n          Principal:\n            Service:\n              - ec2.amazonaws.com\n          Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n     \n     ",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "data.aws_cloudformation_export.demo-eks-iam-role",
            "data.aws_cloudformation_export.demo-sg-ec2",
            "data.aws_subnet.all_subnets-ec2",
            "data.aws_subnet_ids.all_subnet_ids-ec2",
            "module.eks-iam-role.aws_cloudformation_stack.demo-eks-iam-role",
            "module.vpc_setup.aws_cloudformation_stack.demo-vpc"
          ]
        }
      ]
    },
    {
      "module": "module.eks-iam-role",
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "demo-eks-iam-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_IAM"
            ],
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-eks-iam-role/515bb280-3d64-11eb-99f6-0aeefef9077b",
            "name": "demo-eks-iam-role",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "RoleArn": "arn:aws:iam::629150534577:role/demo-eks-iam-role-eksClusterRole-1NGFBK5ZWJI9T"
            },
            "parameters": {},
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Amazon EKS Cluster Role'\n\n\nResources:\n\n  eksClusterRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n            - eks.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\n\nOutputs:\n\n  RoleArn:\n    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters\n    Value: !GetAtt eksClusterRole.Arn\n    Export:\n      Name: !Sub \"${AWS::StackName}-RoleArn\"",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "module": "module.vpc_setup",
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "demo-vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-1:629150534577:stack/demo-vpc/7d3f5010-3d63-11eb-921c-0adc8babde53",
            "name": "demo-vpc",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "PrivateSubnet1": "subnet-0ff162bcd6fe6bf45",
              "PrivateSubnet2": "subnet-0178ee4a35f023d84",
              "PrivateSubnets": "subnet-0ff162bcd6fe6bf45,subnet-0178ee4a35f023d84",
              "PublicSubnet1": "subnet-03d50c5cff724ff5f",
              "PublicSubnet2": "subnet-0a2ecbd3c9a5fecc5",
              "PublicSubnets": "subnet-03d50c5cff724ff5f,subnet-0a2ecbd3c9a5fecc5",
              "VPC": "vpc-0c5cf39e1c414eddd",
              "VPCSGSecurityGroup": "sg-0d95ce5fb56d52675"
            },
            "parameters": {
              "EnvironmentName": "sbx",
              "PrivateSubnet1CIDR": "10.0.2.0/24",
              "PrivateSubnet2CIDR": "10.0.3.0/24",
              "PublicSubnet1CIDR": "10.0.0.0/24",
              "PublicSubnet2CIDR": "10.0.1.0/24",
              "VpcCIDR": "10.0.0.0/16"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": {},
            "template_body": "Description:  This template deploys a VPC, with a pair of public and private subnets spread\n  across two Availability Zones. It deploys an internet gateway, with a default\n  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),\n  and default routes for them in the private subnets.\n\nParameters:\n  EnvironmentName:\n    Description: An environment name that is prefixed to resource names\n    Type: String\n\n  VpcCIDR:\n    Description: Please enter the IP range (CIDR notation) for this VPC\n    Type: String\n    Default: 10.192.0.0/16\n\n  PublicSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone\n    Type: String\n    Default: 10.192.10.0/24\n\n  PublicSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone\n    Type: String\n    Default: 10.192.11.0/24\n\n  PrivateSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone\n    Type: String\n    Default: 10.192.20.0/24\n\n  PrivateSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone\n    Type: String\n    Default: 10.192.21.0/24\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCIDR\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: Name\n          Value: !Ref EnvironmentName\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Ref EnvironmentName\n\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 0, !GetAZs '' ]\n      CidrBlock: !Ref PublicSubnet1CIDR\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)\n\n  PublicSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 1, !GetAZs  '' ]\n      CidrBlock: !Ref PublicSubnet2CIDR\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)\n\n  PrivateSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 0, !GetAZs  '' ]\n      CidrBlock: !Ref PrivateSubnet1CIDR\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)\n\n  PrivateSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 1, !GetAZs  '' ]\n      CidrBlock: !Ref PrivateSubnet2CIDR\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)\n\n  NatGateway1EIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n\n  NatGateway2EIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n\n  NatGateway1:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGateway1EIP.AllocationId\n      SubnetId: !Ref PublicSubnet1\n\n  NatGateway2:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGateway2EIP.AllocationId\n      SubnetId: !Ref PublicSubnet2\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Routes\n\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet1\n\n  PublicSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet2\n\n\n  PrivateRouteTable1:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Routes (AZ1)\n\n  DefaultPrivateRoute1:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway1\n\n  PrivateSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      SubnetId: !Ref PrivateSubnet1\n\n  PrivateRouteTable2:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Routes (AZ2)\n\n  DefaultPrivateRoute2:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable2\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway2\n\n  PrivateSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable2\n      SubnetId: !Ref PrivateSubnet2\n\n  VPCSGSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: \"no-ingress-sg\"\n      GroupDescription: \"Security group with no ingress rule\"\n      VpcId: !Ref VPC\n\nOutputs:\n  VPC:\n    Description: A reference to the created VPC\n    Value: !Ref VPC\n    Export:\n      Name: !Sub \"${AWS::StackName}-VPCID\"\n\n  PublicSubnets:\n    Description: A list of the public subnets\n    Value: !Join [ \",\", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]\n\n  PrivateSubnets:\n    Description: A list of the private subnets\n    Value: !Join [ \",\", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]\n\n  PublicSubnet1:\n    Description: A reference to the public subnet in the 1st Availability Zone\n    Value: !Ref PublicSubnet1\n\n  PublicSubnet2:\n    Description: A reference to the public subnet in the 2nd Availability Zone\n    Value: !Ref PublicSubnet2\n\n  PrivateSubnet1:\n    Description: A reference to the private subnet in the 1st Availability Zone\n    Value: !Ref PrivateSubnet1\n\n  PrivateSubnet2:\n    Description: A reference to the private subnet in the 2nd Availability Zone\n    Value: !Ref PrivateSubnet2\n\n  VPCSGSecurityGroup:\n    Description: Security group with no ingress rule\n    Value: !Ref VPCSGSecurityGroup\n    Export:\n      Name: !Sub \"${AWS::StackName}-SG\"",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ]
}
